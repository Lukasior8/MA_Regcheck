pap_ntv_1 = case_when(
pap_ntv_3 == "No, none of the elements" & is.na(pap_ntv_1) ~ "n",
pap_ntv_2 == "y" & is.na(pap_ntv_1) ~ "n",
TRUE ~ pap_ntv_1
),
pap_ntv_2 = case_when(
pap_ntv_3 == "No, none of the elements" & is.na(pap_ntv_2) ~ "n",
pap_ntv_1 == "y" & is.na(pap_ntv_2) ~ "n",
TRUE ~ pap_ntv_2
),
pap_pap_mt = ifelse(is.na(pap_pap_mt), "x", pap_pap_mt),
pap_mt = ifelse(is.na(pap_mt), "x", pap_mt),
pap_tv = ifelse(is.na(pap_tv), "x", pap_tv),
c_pap_tv = ifelse(is.na(c_pap_tv), "x", c_pap_tv),
pap_ntv_1 = ifelse(is.na(pap_ntv_1), "x", pap_ntv_1),
pap_ntv_2 = ifelse(is.na(pap_ntv_2), "x", pap_ntv_2)
# pap_ntv_3 = ifelse(is.na(pap_ntv_3), "x", pap_ntv_3)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
pap_ndv_1 = case_when(
pap_ndv_3 == "No, none of the elements" & is.na(pap_ndv_1) ~ "n",
pap_ndv_2 == "y" & is.na(pap_ndv_1) ~ "n",
TRUE ~ pap_ndv_1
),
pap_ndv_2 = case_when(
pap_ndv_3 == "No, none of the elements" & is.na(pap_ndv_2) ~ "n",
pap_ndv_1 == "y" & is.na(pap_ndv_2) ~ "n",
TRUE ~ pap_ndv_2
),
pap_dv = ifelse(is.na(pap_dv), "x", pap_dv),
c_pap_dv = ifelse(is.na(c_pap_dv), "x", c_pap_dv),
pap_ndv_1 = ifelse(is.na(pap_ndv_1), "x", pap_ndv_1),
pap_ndv_2 = ifelse(is.na(pap_ndv_2), "x", pap_ndv_2)
# pap_ndv_3 = ifelse(is.na(pap_ndv_3), "x", pap_ndv_3)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
pap_ncv_1 = case_when(
pap_ncv_3 == "No, none of the elements" & is.na(pap_ncv_1) ~ "n",
pap_ncv_2 == "y" & is.na(pap_ncv_1) ~ "n",
TRUE ~ pap_ncv_1
),
pap_ncv_2 = case_when(
pap_ncv_3 == "No, none of the elements" & is.na(pap_ncv_2) ~ "n",
pap_ncv_1 == "y" & is.na(pap_ncv_2) ~ "n",
TRUE ~ pap_ncv_2
),
pap_pap_mc = ifelse(is.na(pap_pap_mc), "x", pap_pap_mc),
pap_mc = ifelse(is.na(pap_mc), "x", pap_mc),
pap_cv = ifelse(is.na(pap_cv), "x", pap_cv),
c_pap_cv = ifelse(is.na(c_pap_cv), "x", c_pap_cv),
pap_ncv_1 = ifelse(is.na(pap_ncv_1), "x", pap_ncv_1),
pap_ncv_2 = ifelse(is.na(pap_ncv_2), "x", pap_ncv_2)
# pap_ncv_3 = ifelse(is.na(pap_ncv_3), "x", pap_ncv_3)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
pap_dcp_1 = case_when(
pap_dcp_3 == "No, none of the elements" & is.na(pap_dcp_1) ~ "n",
pap_dcp_2 == "y" & is.na(pap_dcp_1) ~ "n",
TRUE ~ pap_dcp_1
),
pap_dcp_2 = case_when(
pap_dcp_3 == "No, none of the elements" & is.na(pap_dcp_2) ~ "n",
pap_dcp_1 == "y" & is.na(pap_dcp_2) ~ "n",
TRUE ~ pap_dcp_2
),
pap_dcp_1 = ifelse(is.na(pap_dcp_1), "x", pap_dcp_1),
pap_dcp_2 = ifelse(is.na(pap_dcp_2), "x", pap_dcp_2)
# pap_dcp_3 = ifelse(is.na(pap_dcp_3), "x", pap_dcp_3)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
pap_imd_1 = case_when(
pap_imd_3 == "No, none of the elements" & is.na(pap_imd_1) ~ "n",
pap_imd_2 == "y" & is.na(pap_imd_1) ~ "n",
TRUE ~ pap_imd_1
),
pap_imd_2 = case_when(
pap_imd_3 == "No, none of the elements" & is.na(pap_imd_2) ~ "n",
pap_imd_1 == "y" & is.na(pap_imd_2) ~ "n",
TRUE ~ pap_imd_2
),
pap_pa = ifelse(is.na(pap_pa), "x", pap_pa),
pap_iec_1 = ifelse(is.na(pap_iec_1), "x", pap_iec_1),
pap_imd_1 = ifelse(is.na(pap_imd_1), "x", pap_imd_1),
pap_imd_2 = ifelse(is.na(pap_imd_2), "x", pap_imd_2),
#pap_imd_3 = ifelse(is.na(pap_imd_3), "x", pap_imd_3)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
pap_sm_1 = case_when(
pap_sm_4 == "No, none of the elements" & is.na(pap_sm_1) ~ "n",
(pap_sm_2 == "y" | pap_sm_3 == "y") & is.na(pap_sm_1) ~ "n",
TRUE ~ pap_sm_1
),
pap_sm_2 = case_when(
pap_sm_4 == "No, none of the elements" & is.na(pap_sm_2) ~ "n",
(pap_sm_1 == "y" | pap_sm_3 == "y") & is.na(pap_sm_2) ~ "n",
TRUE ~ pap_sm_2
),
pap_sm_3 = case_when(
pap_sm_4 == "No, none of the elements" & is.na(pap_sm_3) ~ "n",
(pap_sm_1 == "y" | pap_sm_2 == "y") & is.na(pap_sm_3) ~ "n",
TRUE ~ pap_sm_3
),
pap_sm_1 = ifelse(is.na(pap_sm_1), "x", pap_sm_1),
pap_sm_2 = ifelse(is.na(pap_sm_2), "x", pap_sm_2),
pap_sm_3 = ifelse(is.na(pap_sm_3), "x", pap_sm_3)
# pap_sm_4 = ifelse(is.na(pap_sm_4), "x", pap_sm_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
pap_vsa_1 = case_when(
pap_vsa_4 == "No, none of the elements" & is.na(pap_vsa_1) ~ "n",
(pap_vsa_2 == "y" | pap_vsa_3 == "y") & is.na(pap_vsa_1) ~ "n",
TRUE ~ pap_vsa_1
),
pap_vsa_2 = case_when(
pap_vsa_4 == "No, none of the elements" & is.na(pap_vsa_2) ~ "n",
(pap_vsa_1 == "y" | pap_vsa_3 == "y") & is.na(pap_vsa_2) ~ "n",
TRUE ~ pap_vsa_2
),
pap_vsa_3 = case_when(
pap_vsa_4 == "No, none of the elements" & is.na(pap_vsa_3) ~ "n",
(pap_vsa_1 == "y" | pap_vsa_2 == "y") & is.na(pap_vsa_3) ~ "n",
TRUE ~ pap_vsa_3
),
pap_ic = ifelse(is.na(pap_ic), "x", pap_ic),
pap_vsa_1 = ifelse(is.na(pap_vsa_1), "x", pap_vsa_1),
pap_vsa_2 = ifelse(is.na(pap_vsa_2), "x", pap_vsa_2),
pap_vsa_3 = ifelse(is.na(pap_vsa_3), "x", pap_vsa_3)
# pap_vsa_4 = ifelse(is.na(pap_vsa_4), "x", pap_vsa_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_iv1_0 = case_when(
match_iv1_4 == "No, none of the elements are consistent" & is.na(match_iv1_0) ~ "n",
(match_iv1_1 == "y" | match_iv1_2 == "y" | match_iv1_3 == "y") & is.na(match_iv1_0) ~ "n",
TRUE ~ match_iv1_0
),
match_iv1_1 = case_when(
match_iv1_4 == "No, none of the elements are consistent" & is.na(match_iv1_1) ~ "n",
(match_iv1_0 == "y" | match_iv1_2 == "y" | match_iv1_3 == "y") & is.na(match_iv1_1) ~ "n",
TRUE ~ match_iv1_1
),
match_iv1_2 = case_when(
match_iv1_4 == "No, none of the elements are consistent" & is.na(match_iv1_2) ~ "n",
(match_iv1_0 == "y" | match_iv1_1 == "y" | match_iv1_3 == "y") & is.na(match_iv1_2) ~ "n",
TRUE ~ match_iv1_2
),
match_iv1_3 = case_when(
match_iv1_4 == "No, none of the elements are consistent" & is.na(match_iv1_3) ~ "n",
(match_iv1_0 == "y" | match_iv1_1 == "y" | match_iv1_2 == "y") & is.na(match_iv1_3) ~ "n",
TRUE ~ match_iv1_3
),
match_mi1 = ifelse(is.na(match_mi1), "x", match_mi1),
match_iv1_0 = ifelse(is.na(match_iv1_0), "x", match_iv1_0),
match_iv1_1 = ifelse(is.na(match_iv1_1), "x", match_iv1_1),
match_iv1_2 = ifelse(is.na(match_iv1_2), "x", match_iv1_2),
match_iv1_3 = ifelse(is.na(match_iv1_3), "x", match_iv1_3)
# match_iv1_4 = ifelse(is.na(match_iv1_4), "x", match_iv1_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_iv2_0 = case_when(
match_iv2_4 == "No, none of the elements are consistent" & is.na(match_iv2_0) ~ "n",
(match_iv2_1 == "y" | match_iv2_2 == "y" | match_iv2_3 == "y") & is.na(match_iv2_0) ~ "n",
TRUE ~ match_iv2_0
),
match_iv2_1 = case_when(
match_iv2_4 == "No, none of the elements are consistent" & is.na(match_iv2_1) ~ "n",
(match_iv2_0 == "y" | match_iv2_2 == "y" | match_iv2_3 == "y") & is.na(match_iv2_1) ~ "n",
TRUE ~ match_iv2_1
),
match_iv2_2 = case_when(
match_iv2_4 == "No, none of the elements are consistent" & is.na(match_iv2_2) ~ "n",
(match_iv2_0 == "y" | match_iv2_1 == "y" | match_iv2_3 == "y") & is.na(match_iv2_2) ~ "n",
TRUE ~ match_iv2_2
),
match_iv2_3 = case_when(
match_iv2_4 == "No, none of the elements are consistent" & is.na(match_iv2_3) ~ "n",
(match_iv2_0 == "y" | match_iv2_1 == "y" | match_iv2_2 == "y") & is.na(match_iv2_3) ~ "n",
TRUE ~ match_iv2_3
),
match_mi2 = ifelse(is.na(match_mi2), "x", match_mi2),
match_iv2_0 = ifelse(is.na(match_iv2_0), "x", match_iv2_0),
match_iv2_1 = ifelse(is.na(match_iv2_1), "x", match_iv2_1),
match_iv2_2 = ifelse(is.na(match_iv2_2), "x", match_iv2_2),
match_iv2_3 = ifelse(is.na(match_iv2_3), "x", match_iv2_3)
# match_iv2_4 = ifelse(is.na(match_iv2_4), "x", match_iv2_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_tv_0 = case_when(
match_tv_4 == "No, none of the elements are consistent" & is.na(match_tv_0) ~ "n",
(match_tv_1 == "y" | match_tv_2 == "y" | match_tv_3 == "y") & is.na(match_tv_0) ~ "n",
TRUE ~ match_tv_0
),
match_tv_1 = case_when(
match_tv_4 == "No, none of the elements are consistent" & is.na(match_tv_1) ~ "n",
(match_tv_0 == "y" | match_tv_2 == "y" | match_tv_3 == "y") & is.na(match_tv_1) ~ "n",
TRUE ~ match_tv_1
),
match_tv_2 = case_when(
match_tv_4 == "No, none of the elements are consistent" & is.na(match_tv_2) ~ "n",
(match_tv_0 == "y" | match_tv_1 == "y" | match_tv_3 == "y") & is.na(match_tv_2) ~ "n",
TRUE ~ match_tv_2
),
match_tv_3 = case_when(
match_tv_4 == "No, none of the elements are consistent" & is.na(match_tv_3) ~ "n",
(match_tv_0 == "y" | match_tv_1 == "y" | match_tv_2 == "y") & is.na(match_tv_3) ~ "n",
TRUE ~ match_tv_3
),
match_mt = ifelse(is.na(match_mt), "x", match_mt),
match_tv_0 = ifelse(is.na(match_tv_0), "x", match_tv_0),
match_tv_1 = ifelse(is.na(match_tv_1), "x", match_tv_1),
match_tv_2 = ifelse(is.na(match_tv_2), "x", match_tv_2),
match_tv_3 = ifelse(is.na(match_tv_3), "x", match_tv_3)
# match_tv_4 = ifelse(is.na(match_tv_4), "x", match_tv_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_dv_0 = case_when(
match_dv_4 == "No, none of the elements are consistent" & is.na(match_dv_0) ~ "n",
(match_dv_1 == "y" | match_dv_2 == "y" | match_dv_3 == "y") & is.na(match_dv_0) ~ "n",
TRUE ~ match_dv_0
),
match_dv_1 = case_when(
match_dv_4 == "No, none of the elements are consistent" & is.na(match_dv_1) ~ "n",
(match_dv_0 == "y" | match_dv_2 == "y" | match_dv_3 == "y") & is.na(match_dv_1) ~ "n",
TRUE ~ match_dv_1
),
match_dv_2 = case_when(
match_dv_4 == "No, none of the elements are consistent" & is.na(match_dv_2) ~ "n",
(match_dv_0 == "y" | match_dv_1 == "y" | match_dv_3 == "y") & is.na(match_dv_2) ~ "n",
TRUE ~ match_dv_2
),
match_dv_3 = case_when(
match_dv_4 == "No, none of the elements" & is.na(match_dv_3) ~ "n",
(match_dv_0 == "y" | match_dv_1 == "y" | match_dv_2 == "y") & is.na(match_dv_3) ~ "n",
TRUE ~ match_dv_3
),
match_dv_0 = ifelse(is.na(match_dv_0), "x", match_dv_0),
match_dv_1 = ifelse(is.na(match_dv_1), "x", match_dv_1),
match_dv_2 = ifelse(is.na(match_dv_2), "x", match_dv_2),
match_dv_3 = ifelse(is.na(match_dv_3), "x", match_dv_3)
# match_dv_4 = ifelse(is.na(match_dv_4), "x", match_dv_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_cv_0 = case_when(
match_cv_4 == "No, none of the elements are consistent" & is.na(match_cv_0) ~ "n",
(match_cv_1 == "y" | match_cv_2 == "y" | match_cv_3 == "y") & is.na(match_cv_0) ~ "n",
TRUE ~ match_cv_0
),
match_cv_1 = case_when(
match_cv_4 == "No, none of the elements are consistent" & is.na(match_cv_1) ~ "n",
(match_cv_0 == "y" | match_cv_2 == "y" | match_cv_3 == "y") & is.na(match_cv_1) ~ "n",
TRUE ~ match_cv_1
),
match_cv_2 = case_when(
match_cv_4 == "No, none of the elements are consistent" & is.na(match_cv_2) ~ "n",
(match_cv_0 == "y" | match_cv_1 == "y" | match_cv_3 == "y") & is.na(match_cv_2) ~ "n",
TRUE ~ match_cv_2
),
match_cv_3 = case_when(
match_cv_4 == "No, none of the elements are consistent" & is.na(match_cv_3) ~ "n",
(match_cv_0 == "y" | match_cv_1 == "y" | match_cv_2 == "y") & is.na(match_cv_3) ~ "n",
TRUE ~ match_cv_3
),
match_mc = ifelse(is.na(match_mc), "x", match_mc),
match_cv_0 = ifelse(is.na(match_cv_0), "x", match_cv_0),
match_cv_1 = ifelse(is.na(match_cv_1), "x", match_cv_1),
match_cv_2 = ifelse(is.na(match_cv_2), "x", match_cv_2),
match_cv_3 = ifelse(is.na(match_cv_3), "x", match_cv_3)
# match_cv_4 = ifelse(is.na(match_cv_4), "x", match_cv_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_dcp_1 = case_when(
match_dcp_3 == "No, none of the elements are consistent" & is.na(match_dcp_1) ~ "n",
(match_dcp_2 == "y") & is.na(match_dcp_1) ~ "n",
TRUE ~ match_dcp_1
),
match_dcp_2 = case_when(
match_dcp_3 == "No, none of the elements are consistent" & is.na(match_dcp_2) ~ "n",
(match_dcp_1 == "y") & is.na(match_dcp_2) ~ "n",
TRUE ~ match_dcp_2
),
match_iec_1 = ifelse(is.na(match_iec_1), "x", match_iec_1),
match_dcp_1 = ifelse(is.na(match_dcp_1), "x", match_dcp_1),
match_dcp_2 = ifelse(is.na(match_dcp_2), "x", match_dcp_2),
#match_dcp_3 = ifelse(is.na(match_dcp_3), "x", match_dcp_3)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_imd_1 = case_when(
match_imd_3 == "No, none of the elements are consistent" & is.na(match_imd_1) ~ "n",
match_imd_2 == "y" & is.na(match_imd_1) ~ "n",
TRUE ~ match_imd_1
),
match_imd_2 = case_when(
match_imd_3 == "No, none of the elements are consistent" & is.na(match_imd_2) ~ "n",
match_imd_1 == "y" & is.na(match_imd_2) ~ "n",
TRUE ~ match_imd_2
),
match_sm_1 = case_when(
match_sm_4 == "No, none of the elements are consistent" & is.na(match_sm_1) ~ "n",
(match_sm_2 == "y" | match_sm_3 == "y") & is.na(match_sm_1) ~ "n",
TRUE ~ match_sm_1
),
match_sm_2 = case_when(
match_sm_4 == "No, none of the elements are consistent" & is.na(match_sm_2) ~ "n",
(match_sm_1 == "y" | match_sm_3 == "y") & is.na(match_sm_2) ~ "n",
TRUE ~ match_sm_2
),
match_sm_3 = case_when(
match_sm_4 == "No, none of the elements are consistent" & is.na(match_sm_3) ~ "n",
(match_sm_1 == "y" | match_sm_2 == "y") & is.na(match_sm_3) ~ "n",
TRUE ~ match_sm_3
),
match_imd_1 = ifelse(is.na(match_imd_1), "x", match_imd_1),
match_imd_2 = ifelse(is.na(match_imd_2), "x", match_imd_2),
#match_imd_3 = ifelse(is.na(match_imd_3), "x", match_imd_3),
match_sm_1 = ifelse(is.na(match_sm_1), "x", match_sm_1),
match_sm_2 = ifelse(is.na(match_sm_2), "x", match_sm_2),
match_sm_3 = ifelse(is.na(match_sm_3), "x", match_sm_3)
# match_sm_4 = ifelse(is.na(match_sm_4), "x", match_sm_4)
)
data_olmo_selected_mutated <- data_olmo_selected_mutated %>% mutate(
match_vsa_1 = case_when(
match_vsa_4 == "No, none of the elements are consistent" & is.na(match_vsa_1) ~ "n",
(match_vsa_2 == "y" | match_vsa_3 == "y") & is.na(match_vsa_1) ~ "n",
TRUE ~ match_vsa_1
),
match_vsa_2 = case_when(
match_vsa_4 == "No, none of the elements are consistent" & is.na(match_vsa_2) ~ "n",
(match_vsa_1 == "y" | match_vsa_3 == "y") & is.na(match_vsa_2) ~ "n",
TRUE ~ match_vsa_2
),
match_vsa_3 = case_when(
match_vsa_4 == "No, none of the elements are consistent" & is.na(match_vsa_3) ~ "n",
(match_vsa_1 == "y" | match_vsa_2 == "y") & is.na(match_vsa_3) ~ "n",
TRUE ~ match_vsa_3
),
match_ic = ifelse(is.na(match_ic), "x", match_ic),
match_vsa_1 = ifelse(is.na(match_vsa_1), "x", match_vsa_1),
match_vsa_2 = ifelse(is.na(match_vsa_2), "x", match_vsa_2),
match_vsa_3 = ifelse(is.na(match_vsa_3), "x", match_vsa_3)
# match_vsa_4 = ifelse(is.na(match_vsa_4), "x", match_vsa_4)
)
data_olmo_finito <- data_olmo_selected_mutated
data_gpt_finito
data_olmo_finito
data_gpt_finito$psp
data_gpt_olmo_merged <- left_join(data_gpt_finito, data_olmo_finito, by = "psp", suffix = c("_gpt", "_olmo"))
# Bereinigen der Spaltenwerte (entfernt Leerzeichen und sorgt für Großbuchstaben)
clean_column <- function(column) {
return(toupper(trimws(as.character(column))))
}
# Vergleichsfunktion anpassen
compare_columns <- function(gpt_val, olmo_val) {
gpt_val <- clean_column(gpt_val)
olmo_val <- clean_column(olmo_val)
if (is.na(gpt_val) || is.na(olmo_val)) {
return("X")
}
if (gpt_val == olmo_val) {
if (gpt_val == "Y") {
return("Y")
} else if (gpt_val == "N") {
return("N")
} else {
return("X")
}
} else {
if (gpt_val == "Y" && olmo_val == "N") {
return("P")
} else if (gpt_val == "N" && olmo_val == "Y") {
return("Q")
} else if (gpt_val == "Y" && olmo_val == "X") {
return("FY")
} else if (gpt_val == "N" && olmo_val == "X") {
return("FN")
} else if (gpt_val == "X" && olmo_val == "N") {
return("FXN")
} else if (gpt_val == "X" && olmo_val == "Y") {
return("FXY")
}
}
}
# Initialisiere den neuen DataFrame mit der psp-Spalte
data_alphabetic_comparison <- data.frame(psp = data_gpt_olmo_merged$psp)
# Füge die test_retest-Spalte aus dem gpt-Datensatz in den neuen DataFrame ein
data_alphabetic_comparison$test_retest <- data_gpt_olmo_merged$test_retest
# Vergleich und Erstellen der neuen Spalten mit der Endung _comp
for (category in gpt_categories_alphabetic) {
# GPT- und Olmo-Spalten auswählen
gpt_column <- clean_column(data_gpt_olmo_merged[[paste0(category, "_gpt")]])
olmo_column <- clean_column(data_gpt_olmo_merged[[paste0(category, "_olmo")]])
# Überprüfen, ob beide Spalten existieren und die gleiche Länge haben
if (!is.null(gpt_column) && !is.null(olmo_column) && length(gpt_column) == length(olmo_column)) {
# Neue Vergleichsspalte erstellen
data_alphabetic_comparison[[paste0(category, "_comp")]] <- mapply(compare_columns, gpt_column, olmo_column)
} else {
# Wenn die Spalten nicht übereinstimmen, fülle die Vergleichsspalte mit NA
data_alphabetic_comparison[[paste0(category, "_comp")]] <- rep(NA, nrow(data_gpt_olmo_merged))
warning(paste("Spalten", category, "haben unterschiedliche Längen oder fehlen."))
}
}
View(data_gpt_olmo_processed)
# Ergebnis anzeigen
head(data_alphabetic_comparison)
data_alphabetic_comparison$psp
colnames(data_alphabetic_comparison)
colnames(data_gpt_finito)
# Gewünschten Spalten aus data_gpt_finito
selected_columns <- c("psp", "title_pap", "study_pap", "date_gpt", "prompt_version",
"test_retest", "chat_gpt_version", "time_extraction",
"time_comparison", "master_exclude")
# Erstelle einen neuen Datensatz mit nur diesen Spalten
data_gpt_selected <- data_gpt_finito %>% select(all_of(selected_columns))
# Verwende left_join, um die Datensätze via psp und test_retest zu verbinden
data_processed_before_exclusions <- left_join(data_gpt_selected, data_alphabetic_comparison, by = c("psp", "test_retest"))
# Ausgabe des Ergebnisses
head(data_processed_before_exclusions)
# Zeige die psp-Spalte an
data_processed_before_exclusions$psp
# Remove rows where master_exclude column contains "exclude"
comparison_data_processed <- data_processed_before_exclusions[data_processed_before_exclusions$master_exclude != "exclude", ]
# Check the resulting data
print(comparison_data_processed)
# Remove rows where master_exclude column contains "exclude"
data_gpt_olmo_processed <- data_gpt_olmo_merged[data_gpt_olmo_merged$master_exclude != "exclude", ]
# Check the resulting data
print(data_gpt_olmo_processed)
# # Sanity check function for data_processed
# sanity_check_processed <- function(df, allowed_values = c("Y", "N", "X", "P", "Q", "FY", "FN", "FXN", "FXY")) {
#   invalid_entries <- lapply(df, function(column) {
#     if (is.numeric(column)) {
#       return(NULL)  # Skip numeric columns for this check
#     }
#     # Check if any values are not in the allowed set
#     invalid <- !column %in% allowed_values
#     return(which(invalid))  # Return indices of invalid values
#   })
#
#   # Filter out columns with no invalid entries
#   invalid_entries <- Filter(Negate(is.null), invalid_entries)
#
#   if (length(invalid_entries) > 0) {
#     return(invalid_entries)  # Return list of invalid entries per column
#   } else {
#     message("Sanity check passed: All entries are valid.")
#     return(NULL)  # No invalid entries found
#   }
# }
#
# # Run sanity check on data_processed
# invalid_entries_processed <- sanity_check_processed(data_processed)
#
# # Check results
# if (!is.null(invalid_entries_processed)) {
#   print("Invalid entries found:")
#   print(invalid_entries_processed)
# }
# Tabelle erstellen für Testanzahl und Prompt-Versionen
# 1. Gesamtanzahl vor Ausschlüssen
n_total_before_exclusions <- nrow(data_processed_before_exclusions)
# 2. Anzahl nach Ausschlüssen (nur "include" Zeilen berücksichtigen)
n_after_exclusions <- nrow(data_processed_before_exclusions[data_processed_before_exclusions$master_exclude == "include", ])
# 3. Anzahl der Retests (zählen, wie oft "RETEST" in der Spalte test_retest vorkommt)
anzahl_retest <- sum(data_processed_before_exclusions$test_retest == "RETEST", na.rm = TRUE)
# 4. Anzahl der Einträge für jede prompt_version (A, B, C, D)
anzahl_prompt_version_a <- sum(data_processed_before_exclusions$prompt_version == "A", na.rm = TRUE)
anzahl_prompt_version_b <- sum(data_processed_before_exclusions$prompt_version == "B", na.rm = TRUE)
anzahl_prompt_version_c <- sum(data_processed_before_exclusions$prompt_version == "C", na.rm = TRUE)
anzahl_prompt_version_d <- sum(data_processed_before_exclusions$prompt_version == "D", na.rm = TRUE)
# Erstelle eine Tabelle mit den Ergebnissen
test_table <- data.frame(
n_total_before_exclusions = n_total_before_exclusions,
n_after_exclusions = n_after_exclusions,
anzahl_retest = anzahl_retest,
prompt_version_A = anzahl_prompt_version_a,
prompt_version_B = anzahl_prompt_version_b,
prompt_version_C = anzahl_prompt_version_c,
prompt_version_D = anzahl_prompt_version_d
)
# Ausgabe der Tabelle
print(test_table)
# save data to disk in that dir
write.xlsx(comparison_data_processed, "../Data/processed/comparison_data_processed.xlsx")
write.xlsx(data_gpt_olmo_processed, "../Data/processed/data_gpt_olmo_processed.xlsx")
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(comparison_data_processed)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../Data/processed/comparison_data_processed_codebook.xlsx")
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library("readxl")
library(janitor)
library(stringr)
library(openxlsx)
data_gpt_raw <- read_excel("../Data/raw/DATA_Resultate_raw.xlsx") |>
janitor::clean_names()
DATA_olmo_raw <- read_excel("../data/raw/Data Preregistration Effectiveness.xlsx") |>
janitor::clean_names()
data_olmo_raw <- DATA_olmo_raw[seq(3, nrow(DATA_olmo_raw), 3), ] # select only reconciled data
#rename  so that "pre_iec", "pap_iec and "match_iec" colum in olmo are also called pre_iec_1`, `pap_iec_1`, and `match_iec_1` like gpt
data_olmo_raw <- data_olmo_raw %>%
rename(
pre_iec_1 = pre_iec,
pap_iec_1 = pap_iec,
match_iec_1 = match_iec
)
data_gpt_raw <- read_excel("../Data/raw/DATA_Resultate_raw.xlsx") |>
janitor::clean_names()
data_gpt_new <- read_excel("../Data/raw/DATA_Resultate_neu.xlsx") |>
janitor::clean_names()
View(data_gpt_new)
